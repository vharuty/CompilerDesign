Rule: prog -> classDecl_list progBody put_end_program_marker validate_undefineds 
Rule: classDecl_list -> classDecl classDecl_list 
Rule: classDecl -> class id B B2 { D D2 varDeclFunctDef_list } D_ D_2 ; 
Rule: varDeclFunctDef_list -> type id V V2 varDeclFunctDef_tail 
Rule: type -> id 
Rule: varDeclFunctDef_tail -> arraySize_list ; IV IV2 varDeclFunctDef_list 
Rule: arraySize_list -> EPSILON 
Rule: varDeclFunctDef_list -> type id V V2 varDeclFunctDef_tail 
Rule: type -> typeNumeric 
Rule: typeNumeric -> int 
Rule: varDeclFunctDef_tail -> ( F F2 D2 generate_function_marker fParams ) funcBody ; funcDef_list 
Rule: fParams -> type id V V2 arraySize_list FP FP2 fParamsTail_list 
Rule: type -> id 
Rule: arraySize_list -> EPSILON 
Rule: fParamsTail_list -> fParamsTail fParamsTail_list 
Rule: fParamsTail -> , type id V V2 arraySize_list FP FP2 
Rule: type -> typeNumeric 
Rule: typeNumeric -> float 
Rule: arraySize_list -> EPSILON 
Rule: fParamsTail_list -> EPSILON 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> id Validate varDeclStatement_tail 
Rule: varDeclStatement_tail -> id PoP_SemanticStack V V2 arraySize_list ; IV IV2 funcBody_ 
Rule: arraySize_list -> EPSILON 
Rule: funcBody_ -> id Validate varDeclStatement_tail 
Rule: varDeclStatement_tail -> indiceIdnestList_tail check_Dim_Count compute_offset assignOp expr ; Validate_assign_type process_assignOp statement_list 
Rule: indiceIdnestList_tail -> EPSILON 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> multOp factor ass_term_2I term_ 
Rule: multOp -> * create_operation 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> addOp term ass_arithExp_2I arithExpr_ 
Rule: addOp -> + create_operation 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: funcDef_list -> funcDef funcDef_list 
Rule: funcDef -> type id V V2 ( F F2 D2 generate_function_marker fParams ) funcBody ; 
Rule: type -> id 
Rule: fParams -> EPSILON 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> restOfStatment statement_list 
Rule: restOfStatment -> return ( insert_return_type expr ) Validate_return_type ; process_jump_back 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: funcDef_list -> EPSILON 
Rule: classDecl_list -> classDecl classDecl_list 
Rule: classDecl -> class id B B2 { D D2 varDeclFunctDef_list } D_ D_2 ; 
Rule: varDeclFunctDef_list -> type id V V2 varDeclFunctDef_tail 
Rule: type -> typeNumeric 
Rule: typeNumeric -> int 
Rule: varDeclFunctDef_tail -> ( F F2 D2 generate_function_marker fParams ) funcBody ; funcDef_list 
Rule: fParams -> EPSILON 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> restOfStatment statement_list 
Rule: restOfStatment -> return ( insert_return_type expr ) Validate_return_type ; process_jump_back 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: funcDef_list -> EPSILON 
Rule: classDecl_list -> EPSILON 
Rule: progBody -> program generate_program_marker C C2 D2 funcBody ; jump_end_program_marker funcDef_list 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> id Validate varDeclStatement_tail 
Rule: varDeclStatement_tail -> id PoP_SemanticStack V V2 arraySize_list ; IV IV2 funcBody_ 
Rule: arraySize_list -> arraySize arraySize_list 
Rule: arraySize -> [ intValue ] DIM 
Rule: arraySize_list -> EPSILON 
Rule: funcBody_ -> id Validate varDeclStatement_tail 
Rule: varDeclStatement_tail -> id PoP_SemanticStack V V2 arraySize_list ; IV IV2 funcBody_ 
Rule: arraySize_list -> EPSILON 
Rule: funcBody_ -> typeNumeric id V V2 arraySize_list ; IV IV2 funcBody_ 
Rule: typeNumeric -> int 
Rule: arraySize_list -> EPSILON 
Rule: funcBody_ -> id Validate varDeclStatement_tail 
Rule: varDeclStatement_tail -> id PoP_SemanticStack V V2 arraySize_list ; IV IV2 funcBody_ 
Rule: arraySize_list -> EPSILON 
Rule: funcBody_ -> id Validate varDeclStatement_tail 
Rule: varDeclStatement_tail -> indiceIdnestList_tail check_Dim_Count compute_offset assignOp expr ; Validate_assign_type process_assignOp statement_list 
Rule: indiceIdnestList_tail -> [ insert_expression_int arithExpr Validate_dimention_type ] Validate_DIM indiceIdnestList_tail 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: indiceIdnestList_tail -> . check_Dim_Count compute_offset id Validate_Nest indiceIdnestList_tail 
Rule: indiceIdnestList_tail -> . check_Dim_Count compute_offset id Validate_Nest indiceIdnestList_tail 
Rule: indiceIdnestList_tail -> [ insert_expression_int arithExpr Validate_dimention_type ] Validate_DIM indiceIdnestList_tail 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: indiceIdnestList_tail -> EPSILON 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> statement statement_list 
Rule: statement -> assignmentStatment 
Rule: assignmentStatment -> variable_ assignOp expr ; Validate_assign_type process_assignOp 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> ( Validate_Func copy_Runtime_parameter_liast aParams ) Validate_numberOf_parameters jump_to_function replace_By_return_value 
Rule: aParams -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> statement statement_list 
Rule: statement -> assignmentStatment 
Rule: assignmentStatment -> variable_ assignOp expr ; Validate_assign_type process_assignOp 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> idnest_ idnest_list_ 
Rule: idnest_ -> . check_Dim_Count compute_offset id Validate_Nest indice_list 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> ( Validate_Func copy_Runtime_parameter_liast aParams ) Validate_numberOf_parameters jump_to_function replace_By_return_value 
Rule: aParams -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: funcDef_list -> funcDef funcDef_list 
Rule: funcDef -> type id V V2 ( F F2 D2 generate_function_marker fParams ) funcBody ; 
Rule: type -> id 
Rule: fParams -> type id V V2 arraySize_list FP FP2 fParamsTail_list 
Rule: type -> typeNumeric 
Rule: typeNumeric -> int 
Rule: arraySize_list -> EPSILON 
Rule: fParamsTail_list -> EPSILON 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> restOfStatment statement_list 
Rule: restOfStatment -> for ( type id V_for assignOp IV_for expr Validate_assign_type process_assignOp ; generate_FOR_marker generate_END_FOR_marker relExpr ; assignStat ) Validate_assign_type Save_assignOp statBlock jump_FOR ; mark_END_FOR POP_jump_marker_stack 
Rule: type -> typeNumeric 
Rule: typeNumeric -> int 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: relExpr -> arithExpr relOp arithExpr validate_relType 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: relOp -> < create_operation 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: assignStat -> variable_ assignOp expr 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> addOp term ass_arithExp_2I arithExpr_ 
Rule: addOp -> + create_operation 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statBlock -> { statement_list } 
Rule: statement_list -> statement statement_list 
Rule: statement -> assignmentStatment 
Rule: assignmentStatment -> variable_ assignOp expr ; Validate_assign_type process_assignOp 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> EPSILON 
Rule: term_ -> multOp factor ass_term_2I term_ 
Rule: multOp -> * create_operation 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: funcDef_list -> funcDef funcDef_list 
Rule: funcDef -> type id V V2 ( F F2 D2 generate_function_marker fParams ) funcBody ; 
Rule: type -> id 
Rule: fParams -> EPSILON 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> EPSILON 
Rule: prog -> classDecl_list progBody put_end_program_marker validate_undefineds 
Rule: classDecl_list -> classDecl classDecl_list 
Rule: classDecl -> class id B B2 { D D2 varDeclFunctDef_list } D_ D_2 ; 
Rule: varDeclFunctDef_list -> type id V V2 varDeclFunctDef_tail 
Rule: type -> id 
Rule: varDeclFunctDef_tail -> arraySize_list ; IV IV2 varDeclFunctDef_list 
Rule: arraySize_list -> EPSILON 
SEMERR#12:	Undefined identifier on line# 6 : BCD
Rule: varDeclFunctDef_list -> type id V V2 varDeclFunctDef_tail 
Rule: type -> typeNumeric 
Rule: typeNumeric -> int 
Rule: varDeclFunctDef_tail -> ( F F2 D2 generate_function_marker fParams ) funcBody ; funcDef_list 
Rule: fParams -> type id V V2 arraySize_list FP FP2 fParamsTail_list 
Rule: type -> id 
Rule: arraySize_list -> EPSILON 
SEMERR#12:	Undefined identifier on line# 7 : cl1
Rule: fParamsTail_list -> fParamsTail fParamsTail_list 
Rule: fParamsTail -> , type id V V2 arraySize_list FP FP2 
Rule: type -> typeNumeric 
Rule: typeNumeric -> float 
Rule: arraySize_list -> EPSILON 
Rule: fParamsTail_list -> EPSILON 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> id Validate varDeclStatement_tail 
SEMERR#1:	Undeclared identifier on line# 8 : cl3

Rule: varDeclStatement_tail -> id PoP_SemanticStack V V2 arraySize_list ; IV IV2 funcBody_ 
Rule: arraySize_list -> EPSILON 
SEMERR#12:	Undefined identifier on line# 8 : cl3
Rule: funcBody_ -> id Validate varDeclStatement_tail 
Rule: varDeclStatement_tail -> indiceIdnestList_tail check_Dim_Count compute_offset assignOp expr ; Validate_assign_type process_assignOp statement_list 
Rule: indiceIdnestList_tail -> EPSILON 
Rule: assignOp -> = validateType 
SEMERR#20:	Invalid operation on line#  10 => Assignment operation is defined only for <int> and <float>
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> multOp factor ass_term_2I term_ 
Rule: multOp -> * create_operation 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> EPSILON 
SEMERR#6:	Type mismatch on line#	10:	parameters of the same type are rquired
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> addOp term ass_arithExp_2I arithExpr_ 
Rule: addOp -> + create_operation 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: funcDef_list -> funcDef funcDef_list 
Rule: funcDef -> type id V V2 ( F F2 D2 generate_function_marker fParams ) funcBody ; 
Rule: type -> id 
SEMERR#1:	Undeclared identifier on line# 13 : BCD
Rule: fParams -> EPSILON 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> restOfStatment statement_list 
Rule: restOfStatment -> return ( insert_return_type expr ) Validate_return_type ; process_jump_back 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: funcDef_list -> EPSILON 
Rule: classDecl_list -> classDecl classDecl_list 
Rule: classDecl -> class id B B2 { D D2 varDeclFunctDef_list } D_ D_2 ; 
Rule: varDeclFunctDef_list -> type id V V2 varDeclFunctDef_tail 
Rule: type -> typeNumeric 
Rule: typeNumeric -> int 
Rule: varDeclFunctDef_tail -> ( F F2 D2 generate_function_marker fParams ) funcBody ; funcDef_list 
Rule: fParams -> EPSILON 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> restOfStatment statement_list 
Rule: restOfStatment -> return ( insert_return_type expr ) Validate_return_type ; process_jump_back 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: funcDef_list -> EPSILON 
Rule: classDecl_list -> EPSILON 
Rule: progBody -> program generate_program_marker C C2 D2 funcBody ; jump_end_program_marker funcDef_list 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> id Validate varDeclStatement_tail 
SEMERR#1:	Undeclared identifier on line# 32 : myClass

Rule: varDeclStatement_tail -> id PoP_SemanticStack V V2 arraySize_list ; IV IV2 funcBody_ 
Rule: arraySize_list -> arraySize arraySize_list 
Rule: arraySize -> [ intValue ] DIM 
Rule: arraySize_list -> EPSILON 
SEMERR#12:	Undefined identifier on line# 32 : myClass
Rule: funcBody_ -> id Validate varDeclStatement_tail 
Rule: varDeclStatement_tail -> id PoP_SemanticStack V V2 arraySize_list ; IV IV2 funcBody_ 
Rule: arraySize_list -> EPSILON 
Rule: funcBody_ -> typeNumeric id V V2 arraySize_list ; IV IV2 funcBody_ 
Rule: typeNumeric -> int 
Rule: arraySize_list -> EPSILON 
Rule: funcBody_ -> id Validate varDeclStatement_tail 
Rule: varDeclStatement_tail -> id PoP_SemanticStack V V2 arraySize_list ; IV IV2 funcBody_ 
Rule: arraySize_list -> EPSILON 
Rule: funcBody_ -> id Validate varDeclStatement_tail 
Rule: varDeclStatement_tail -> indiceIdnestList_tail check_Dim_Count compute_offset assignOp expr ; Validate_assign_type process_assignOp statement_list 
Rule: indiceIdnestList_tail -> [ insert_expression_int arithExpr Validate_dimention_type ] Validate_DIM indiceIdnestList_tail 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: indiceIdnestList_tail -> . check_Dim_Count compute_offset id Validate_Nest indiceIdnestList_tail 
SEMERR#1:	Undeclared identifier on line# 36 : abc
Rule: indiceIdnestList_tail -> . check_Dim_Count compute_offset id Validate_Nest indiceIdnestList_tail 
Rule: indiceIdnestList_tail -> [ insert_expression_int arithExpr Validate_dimention_type ] Validate_DIM indiceIdnestList_tail 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: indiceIdnestList_tail -> EPSILON 
Rule: assignOp -> = validateType 
SEMERR#20:	Invalid operation on line#  36 => Assignment operation is defined only for <int> and <float>
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> statement statement_list 
Rule: statement -> assignmentStatment 
Rule: assignmentStatment -> variable_ assignOp expr ; Validate_assign_type process_assignOp 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
SEMERR#1:	Undeclared identifier on line# 37 : f_doesNotExist

Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> ( Validate_Func copy_Runtime_parameter_liast aParams ) Validate_numberOf_parameters jump_to_function replace_By_return_value 
Rule: aParams -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> statement statement_list 
Rule: statement -> assignmentStatment 
Rule: assignmentStatment -> variable_ assignOp expr ; Validate_assign_type process_assignOp 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> idnest_ idnest_list_ 
Rule: idnest_ -> . check_Dim_Count compute_offset id Validate_Nest indice_list 
SEMERR#1:	Undeclared identifier on line# 38: f2
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> ( Validate_Func copy_Runtime_parameter_liast aParams ) Validate_numberOf_parameters jump_to_function replace_By_return_value 
Rule: aParams -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: funcDef_list -> funcDef funcDef_list 
Rule: funcDef -> type id V V2 ( F F2 D2 generate_function_marker fParams ) funcBody ; 
Rule: type -> id 
Rule: fParams -> type id V V2 arraySize_list FP FP2 fParamsTail_list 
Rule: type -> typeNumeric 
Rule: typeNumeric -> int 
Rule: arraySize_list -> EPSILON 
Rule: fParamsTail_list -> EPSILON 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> restOfStatment statement_list 
Rule: restOfStatment -> for ( type id V_for assignOp IV_for expr Validate_assign_type process_assignOp ; generate_FOR_marker generate_END_FOR_marker relExpr ; assignStat ) Validate_assign_type Save_assignOp statBlock jump_FOR ; mark_END_FOR POP_jump_marker_stack 
Rule: type -> typeNumeric 
Rule: typeNumeric -> int 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: relExpr -> arithExpr relOp arithExpr validate_relType 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
SEMERR#1:	Undeclared identifier on line# 43 : j

Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: relOp -> < create_operation 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: assignStat -> variable_ assignOp expr 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
SEMERR#1:	Undeclared identifier on line# 43 : k

Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: assignOp -> = validateType 
SEMERR#20:	Invalid operation on line#  43 => Assignment operation is defined only for <int> and <float>
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
SEMERR#1:	Undeclared identifier on line# 43 : k

Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> addOp term ass_arithExp_2I arithExpr_ 
Rule: addOp -> + create_operation 
Rule: term -> factor term_ 
Rule: factor -> intValue insert_factor_ 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statBlock -> { statement_list } 
Rule: statement_list -> statement statement_list 
Rule: statement -> assignmentStatment 
Rule: assignmentStatment -> variable_ assignOp expr ; Validate_assign_type process_assignOp 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: assignOp -> = validateType 
Rule: expr -> arithExpr exp_ 
Rule: arithExpr -> term arithExpr_ 
Rule: term -> factor term_ 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> EPSILON 
Rule: term_ -> multOp factor ass_term_2I term_ 
Rule: multOp -> * create_operation 
Rule: factor -> variable_ factor_ IS_Function insert_factor_var 
Rule: variable_ -> id Validate indice_list idnest_list_ check_Dim_Count compute_offset 
Rule: indice_list -> EPSILON 
Rule: idnest_list_ -> EPSILON 
Rule: factor_ -> EPSILON 
Rule: term_ -> EPSILON ass_term_S 
Rule: arithExpr_ -> EPSILON ass_arithExp_S 
Rule: exp_ -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: statement_list -> EPSILON 
Rule: funcDef_list -> funcDef funcDef_list 
Rule: funcDef -> type id V V2 ( F F2 D2 generate_function_marker fParams ) funcBody ; 
Rule: type -> id 
SEMERR#1:	Undeclared identifier on line# 49 : BCD
Rule: fParams -> EPSILON 
Rule: funcBody -> { D funcBody_ } D_ D_2 
Rule: funcBody_ -> EPSILON 
