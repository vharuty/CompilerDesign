classDecl_list progBody put_end_program_marker validate_undefineds#class program
class id B B2 { D D2 varDeclFunctDef_list } D_ D_2 ;#class
program generate_program_marker C C2 D2 funcBody ; jump_end_program_marker funcDef_list#program
type id V V2 ( F F2 D2 generate_function_marker fParams ) funcBody ;#id float int
{ D funcBody_ } D_ D_2#{
EPSILON#EPSILON
type id V V2 varDeclFunctDef_tail#id float int
arraySize_list ; IV IV2 varDeclFunctDef_list#[ ;
( F F2 D2 generate_function_marker fParams ) funcBody ; funcDef_list#(
EPSILON#EPSILON
[ insert_expression_int arithExpr Validate_dimention_type ] Validate_DIM indiceIdnestList_tail#[
. check_Dim_Count compute_offset id Validate_Nest indiceIdnestList_tail#.
indiceIdnestList_tail check_Dim_Count compute_offset assignOp expr ; Validate_assign_type process_assignOp statement_list#. [ =
id PoP_SemanticStack V V2 arraySize_list ; IV IV2 funcBody_#id
EPSILON#EPSILON 
restOfStatment statement_list#for if get put return
id Validate varDeclStatement_tail#id
typeNumeric id V V2 arraySize_list ; IV IV2 funcBody_#float int
restOfStatment#for if get put return
assignmentStatment#id
variable_ assignOp expr ; Validate_assign_type process_assignOp#id
return ( insert_return_type expr ) Validate_return_type ; process_jump_back#return
put ( expr validate_put ) ;#put
get ( variable_ process_get ) ;#get
if generate_ENDIF_marker generate_ELSE_marker ( insert_bool_type expr Validate_IF_type ) then statBlock jump_ENDIF else mark_ELSE POP_jump_marker_stack statBlock ; mark_ENDIF POP_jump_marker_stack#if
for ( type id V_for assignOp IV_for expr Validate_assign_type process_assignOp ; generate_FOR_marker generate_END_FOR_marker relExpr ; assignStat ) Validate_assign_type Save_assignOp statBlock jump_FOR ; mark_END_FOR POP_jump_marker_stack#for
variable_ assignOp expr#id
statement#id for if get put return
{ statement_list }#{
arithExpr exp_#( floatValue intValue not id + -
EPSILON#EPSILON
relOp arithExpr validate_relType#< <= <> == > >=
arithExpr relOp arithExpr validate_relType#( floatValue intValue not id + -
term arithExpr_#( floatValue intValue not id + -
EPSILON ass_arithExp_S#EPSILON
addOp term ass_arithExp_2I arithExpr_#+ - or
-#-
+#+
factor term_#( floatValue intValue not id + -
EPSILON ass_term_S#EPSILON
multOp factor ass_term_2I term_#* / and
sign createSignOperator factor createSignFactor processSignOperation#+ -
variable_ factor_ IS_Function insert_factor_var#id
not factor process_NOT#not
intValue insert_factor_#intValue
floatValue insert_factor_#floatValue
( arithExpr )#(
id Validate indice_list idnest_list_ check_Dim_Count compute_offset#id
EPSILON#EPSILON
idnest_ idnest_list_#.
. check_Dim_Count compute_offset id Validate_Nest indice_list#.
EPSILON#EPSILON
( Validate_Func copy_Runtime_parameter_liast aParams ) Validate_numberOf_parameters jump_to_function replace_By_return_value#(
[ insert_expression_int arithExpr Validate_dimention_type ] Validate_DIM#[
[ intValue ] DIM#[
typeNumeric#float int
id#id
int#int
float#float
EPSILON#EPSILON
type id V V2 arraySize_list FP FP2 fParamsTail_list#id float int
EPSILON#EPSILON
expr Validate_Signature_type aParamsTail_list#( floatValue intValue not id + -
, type id V V2 arraySize_list FP FP2#,
, expr Validate_Signature_type#,
EPSILON#EPSILON
classDecl classDecl_list#class
EPSILON#EPSILON
funcDef funcDef_list#id float int
EPSILON#EPSILON
statement statement_list#id for if get put return
EPSILON#EPSILON
arraySize arraySize_list#[
EPSILON#EPSILON
indice indice_list#[
EPSILON#EPSILON
fParamsTail fParamsTail_list#,
EPSILON#EPSILON
aParamsTail aParamsTail_list#,
= validateType#=
>= create_operation#>=
> create_operation#>
== create_operation#==
<> create_operation#<>
<= create_operation#<=
< create_operation#<
or create_operation#or
- create_operation#-
+ create_operation#+
and create_operation#and
/ create_operation#/
* create_operation#*