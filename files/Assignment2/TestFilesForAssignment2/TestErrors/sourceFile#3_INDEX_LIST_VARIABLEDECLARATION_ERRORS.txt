// This file is to show how syntax analyzer behaves in case of variable declaration, array list errors
// file is big by purpose to make sure that that sort of tiny mistakes do not make problem for syntax analyzer
// the same type of errors are made in different parts of the source file
 
class MyClass2 { 

	  MyClass1 var5[10][20] ;
	  MyClass1 var5[-10][20][21][22][23.23][24][25][26  // different errors contains
	  int var5[-10][20][21][22][23.23][24][25][26 		// different errors
		int var5[10][20.7] ;				// floating point error
		float var5[10][20.7] 

int Var1  ;
int Var2[20 ; 											// <]> is missing 
int Var3 [20.23][6][10][5] ;					 // floating point number as an array definition
float var4
MyClass2 var5[20][-5][2]; 							// contains negative integer as an array definition
  var5[20][5][2];								// missing variable type or could be considered as identifier 
MyClass2 var5[20];
float var5[20][-5][2; 						// reports only one error 

int MyFunk1 ( int param1 , MyClass param2[20][25, float param2[10] ) {  // missing <]> before <,>

	
	MyClass1 var5 [10][20] 			// missing ";" => 
	
	int var6; // missing variable type 

	int var7; 
			// missing [											// missing ] before 10
	MyClass2.var3[ 20]15 ][ 10].var1 = ( 20 * not + 20 ) * 10 + abc.bcd[20][10.abc ( 20 == 10  ) *  factor   + ( 20.8) * 15 +not 20   <>  20 * 20.5 ;
	
	MyClass2.var5.var2[ 20 * 5].var5 	=  20 ;
	id =  10 ;
for (int i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8  ) ;
											// missing <]> before <.>
	for (int i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20.abc = 13 <> 12.8  ) 
		for ( int i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8  ) ; ;
	for ( int i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8  ) 
		for ( float i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8 ) 
			for ( MyClass i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8  ) 
				{ 
					if ( ( 20 * not + 20 ) * 10 + abc.bcd[20][10].abc ( 20 == 10  ) * 20+ ( 20.8) * 15 +not 20   <>  20 * 20.5  ) then 
						for ( MyClass i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8 ) {
							get ( MyClass.vatr1[20].abc.bcd) ;
							put ( ( 20 * not + 20 ) * 10 + abc.bcd[20][10].abc ( 20 == 10  ) * 20+ ( 20.8) * 15 +not 20   <>  20 * 20.5  ) ;
						} ; 
					else 
						if ( ( 20 * not + 20 ) * 10 + abc.bcd[20][10].abc ( 20 == 10  ) * 20+ ( 20.8) * 15 +not 20   <>  20 * 20.5  ) then 
							put ( ( 20 * not + 20 ) * 10 + abc.bcd[20][10].abc ( 20 == 10  ) * 20+ ( 20.8) * 15 +not 20   <>  20 * 20.5  ) ; 
						else 
							put ( ( 20 * not + 20 ) * 10 + abc.bcd[20][10].abc ( 20 == 10  ) * 20+ ( 20.8) * 15 +not 20   <>  20 * 20.5  ) ; ;  ;	
  

				}; ; ; 
	 
} ; 


float MyFunk2 ( int param1 , MyClass param2[20][20], float param2[10][10][10][10], int param2[10] ) { 

// missing <]> before 20  => MyClass1.Var7[ 20
	MyClass1.Var7[ 20   =  ( 20 * not + 20 ) * 10 + abc.bcd[20][10].abc ( 20 == 10  ) * 20+ ( 20.8) * 15 +not 20   <>  20 *20.5  ; 
	
	get ( a[10][20] 21]) ;  	// missing <[> before 21
	// missing <]> after 12
	bs[12.bcd[20].abc	 =	( 20 * not + 20 ) * 10 + abc.bcd[20][10].abc ( 20 == 10  ) * 20+ ( 20.8) * 15 +not 20   <>  20 * 20.5  ;
	for ( MyClass i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8 ) {
	
		get ( bs[12]bcd[20].abc ) ; 		// missing <.>
		put ( 10 ) ;
		if ( 10 ) then 
			put ( 10 ) ; 
		else 
			put ( 10 ) ;;
	} ;
	
	return ( 10 ) ; 

} ; 





myClass3 MyFunk3 ( float param2[10   ) {  // missing <]> in parameter list
	
};

} ; 




program {

	
	MyClass1 var5[10][20 ; // missing <]>
	MyClass1 var6;
	  var7;  // missing variable type 
	  MyClass1 var5[10][20] ;
	  MyClass1 var5[-10][20][21][22][23.23][24][25][26]  // different errors contains
	
	for (int i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8  ) 
		for ( int i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8  ) ; ;
	
	  } ;




MyClass1 function2 ( ){ 
	for ( int i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8 ) 
		for ( float j  = 12 ; 	ab <> bc  ; abc.bcd[20].abc = 13 <> 12.8 ) ; ;  
};
					// <]> is missing before <)>
myClass3 MyFunk3 ( float param2[10 ) {
	
};

float MyFunk2 ( int param1 , MyClass param2[20][20], float param2[10][10][10][10], int param2[10] ) { 

	MyClass1.Var7[ 20 ]  =  ( 20 * not + 20 ) * 10 + abc.bcd[20][10].abc ( 20 == 10  ) * 20+ ( 20.8) * 15 +not 20   <>  20 *20.5  ; 
	
	get ( a[10][20][21]) ; 
	//<]> is missing before <.>
	bs[12].bcd[20.abc	 =	( 20 * not + 20 ) * 10 + abc.bcd[20][10].abc ( 20 == 10  ) * 20+ ( 20.8) * 15 +not 20   <>  20 * 20.5  ;
	for ( MyClass i = 13 <> 12.8;  20 <> 20  ; abc.bcd[20].abc = 13 <> 12.8 ) {
		get ( bs[12].bcd[20].abc ) ;
		put ( 10 ) ;
		if ( 10 ) then 
			put ( 10 ) ; 
		else 
			put ( 10 ) ;;
	} ;
	
	return ( 10 ) ; 

} ; 




